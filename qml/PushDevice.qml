import QtQuick 2.0
import WPN114.Audio 1.1 as WPN114
import WPN114.Devices 1.1

WPN114.MIDIGateway
{    
    id: root

    property alias in_channel: input.channels
    property alias out_channel: output.channels

    midi_in.assign: WPN114.Input { id: input; type: WPN114.Input.Midi }
    midi_out.assign: WPN114.Output { id: output; type: WPN114.Input.Midi }

    //---------------------------------------------------------------------------------------------
    signal
    play();

    //---------------------------------------------------------------------------------------------
    signal
    record();

    //---------------------------------------------------------------------------------------------
    signal
    octaveDown();

    //---------------------------------------------------------------------------------------------
    signal
    octaveUp();

    //---------------------------------------------------------------------------------------------
    signal
    session();

    //---------------------------------------------------------------------------------------------
    signal
    track();

    //---------------------------------------------------------------------------------------------
    signal
    padOn(int index, int velocity);

    //---------------------------------------------------------------------------------------------
    signal
    padOff(int index, int velocity);

    //---------------------------------------------------------------------------------------------
    signal
    leftArrow();

    //---------------------------------------------------------------------------------------------
    signal
    rightArrow();

    //---------------------------------------------------------------------------------------------
    signal
    select(bool value);

    //---------------------------------------------------------------------------------------------
    signal
    shift(bool value);

    //---------------------------------------------------------------------------------------------
    signal
    knob(int index, int value);

    //---------------------------------------------------------------------------------------------
    signal
    upToggle(int index, int value);

    //---------------------------------------------------------------------------------------------
    signal
    downToggle(int index, int value);

    //---------------------------------------------------------------------------------------------
    signal
    modwheel(int value);

    //---------------------------------------------------------------------------------------------
    function
    light_button(index, mode) { write_control(0, index, mode); }

    //---------------------------------------------------------------------------------------------
    function
    light_pad(index, color, mode) { write_note_on(mode, index+36, color); }

    //---------------------------------------------------------------------------------------------
    function
    light_toggle(row, index, mode) { write_control(0, row+index, mode); }

    //---------------------------------------------------------------------------------------------
    function
    lcd_display(row, column, str)
    //---------------------------------------------------------------------------------------------
    {
        var ssx = [240, 71, 127, 21, 24+row, 0, str.length+1, column, str, 247];
        write_sysex(ssx);
    }

    //---------------------------------------------------------------------------------------------
    function
    lcd_clear_line(index)
    //---------------------------------------------------------------------------------------------
    {
        var ssx = [240, 71, 127, 21, 28+index, 0, 0, 247];
        write_sysex(ssx);
    }

    //---------------------------------------------------------------------------------------------
    function
    lcd_clear()
    //---------------------------------------------------------------------------------------------
    {
        for (var i = 0; i < 4; ++i)
            lcd_clear_line(i);
    }

    //---------------------------------------------------------------------------------------------
    function
    set_touch_bend()
    //---------------------------------------------------------------------------------------------
    {
        var ssx = [240, 71, 127, 21, 99, 0, 1, 5, 247];
        write_sysex(ssx);
    }

    //---------------------------------------------------------------------------------------------
    function
    set_touch_modwheel()
    //---------------------------------------------------------------------------------------------
    {
        var ssx = [240, 71, 127, 21, 99, 0, 1, 9, 247];
        write_sysex(ssx);
    }

    //---------------------------------------------------------------------------------------------
    onControl:
    //---------------------------------------------------------------------------------------------
    {        
        console.log("control", index, value);

        if (index >= 71 && index <= 79)
            root.knob(index-71, value);

        else if (index == 0)
            root.modwheel(value);

        else if (index >= 20 && index <= 27)
            root.upToggle(index-20, value);

        else if (index >= 102 && index <= 109)
            root.downToggle(index-102, value);

        else if (index === CommandButtons.Select)
            root.select(value);

        else if (index === CommandButtons.Shift)
            root.shift(value);

        else if (index === CommandButtons.LeftArrow && value)
            root.leftArrow();

        else if (index === CommandButtons.RightArrow && value)
            root.rightArrow();

        else if (index === CommandButtons.OctaveDown && value)
            root.octaveDown();

        else if (index === CommandButtons.OctaveUp && value)
            root.octaveUp();

        else if (index === CommandButtons.Session && value)
            root.session();

        else if (index === CommandButtons.Note && value)
            root.track();

        else if (index === CommandButtons.Play && value)
            root.play();
    }

    //---------------------------------------------------------------------------------------------
    onNoteOn:
    //---------------------------------------------------------------------------------------------
    {
        if (index > 35 && index < 100)
            root.padOn(index-36, velocity);
    }

    //---------------------------------------------------------------------------------------------
    onNoteOff:
    //---------------------------------------------------------------------------------------------
    {
        if (index > 35 && index < 100)
            root.padOff(index-36, velocity);
    }
}
